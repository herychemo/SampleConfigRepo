
info:
  component: Auth Ms


spring:
  application:
    name: auth-ms
    instance_id: dev


  # Logging    
  sleuth:
    sampler:
      probability: 0.2  # 20.0% Sampling
  zipkin:
    sender:
      type: web
    enabled: ${ZIPKIN_ENABLED:true}
    base-url: ${ZIPKIN_SERVER:http://localhost:9411/}

  logging:
    logstash:
      url: ${LOGSTASH_URL:localhost}
      tcp-port: ${LOGSTASH_TCP_PORT:5000}
      tcp-input: ${logging.logstash.url}:${logging.logstash.tcp-port}


  rabbitmq:
    host: ${RABBIT_MQ_URL:localhost}
    port: ${RABBIT_MQ_PORT:5672}
    username: ${RABBIT_MQ_USERNAME:guest}
    password: ${RABBIT_MQ_PASSWORD:guest}


  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  
  
  jpa:
    database: default
    hibernate:
      ddl-auto: validate

    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  
  # Configure flyway schemas for microservice
  flyway:
    schemas: auth
  
  datasource:
    postgres:
      driver-class-name: org.postgresql.Driver
      jdbc-url: jdbc:postgresql://localhost:5432/cloud_db?currentSchema=auth
      username: dbo_admin
      password: rootroot

      initial-size: 1
      max-active: 10
      max-idle: 10
      test-on-borrow: true
      validation-query: SELECT 1
      time-between-eviction-runs-millis: 30000
      max-wait: 10000
      min-evictable-idle-time-millis: 30000
      log-abandoned: true
      test-while-idle: true
      validation-interval: 300000
      jdbc-interceptors: org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport(threshold=10000)


server:
  port: ${SERVER_PORT:9869}
  servlet:
    context-path: /auth-ms

management:
  endpoints:
    web:
      exposure:
        include: '*'
      base-path: /actuator
  endpoint:
    health:
      show-details: always


security:
  signing-key: xja6jeEyKKX5HpJ #https://www.random.org/strings/
  security-realm: Spring Cloud Sample Stack
  jwt:
    local-resource-id: auth-ms-resource-id



## Eureka client properties ##
eureka:
  instance:
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.int}}
      management:
        context-path: ${server.servlet.context-path}/actuator
        port: ${server.port}
    #nonSecurePort: 8088
    statusPageUrlPath: ${server.servlet.context-path}/actuator/info
    healthCheckUrlPath: ${server.servlet.context-path}/actuator/health
  client:
    enabled: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
    registerWithEureka: true
    healthcheck:
      enabled: true
    fetchRegistry: false


##Hystrix##
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000
